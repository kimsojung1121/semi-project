package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import dto.OrdersDTO;

public class OrdersDAO extends JdbcDAO {
	private static OrdersDAO _dao;
	
	private OrdersDAO() {
		// TODO Auto-generated constructor stub
	}
	
	static {
		_dao = new OrdersDAO();
	}
	
	public static OrdersDAO getDAO() {
		return _dao;
	}
	
	
	public List<OrdersDTO> selectAllOrders(String id) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<OrdersDTO> orderList = new ArrayList<OrdersDTO>();
		
		try {
			con = getConnection();
			String sql = "select * from orders where id=?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, id);
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				OrdersDTO orders = new OrdersDTO();
				orders.setoNo(rs.getInt("o_no"));
				orders.setId(rs.getString("id"));
				orders.setpNo(rs.getInt("p_no"));
				orders.setcLettering(rs.getString("c_lettering"));
				orders.setoZipcode(rs.getString("o_zipcode"));
				orders.setoAddress1(rs.getString("o_address1"));
				orders.setoAddress2(rs.getString("o_address2"));
				orders.setoDate(rs.getString("o_date").substring(0,10));
				orders.setoState(rs.getInt("o_state"));
				orderList.add(orders);
			}
			
			
		} catch (SQLException e) {
			System.out.println("[에러] selectAllOrders() 메소드에서 오류 발생 ");
		} finally {
			close(con, pstmt, rs);
		}
		
		return orderList;
		
	}
	
	public List<OrdersDTO> selectOrderNo(int oNo) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<OrdersDTO> orderList = new ArrayList<OrdersDTO>();
		
		try {
			con = getConnection();
			String sql = "select * from orders where o_no=?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, oNo);
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				OrdersDTO orders = new OrdersDTO();
				orders.setoNo(rs.getInt("o_no"));
				orders.setId(rs.getString("id"));
				orders.setpNo(rs.getInt("p_no"));
				orders.setcLettering(rs.getString("c_lettering"));
				orders.setoZipcode(rs.getString("o_zipcode"));
				orders.setoAddress1(rs.getString("o_address1"));
				orders.setoAddress2(rs.getString("o_address2"));
				orders.setoDate(rs.getString("o_date").substring(0,10));
				orders.setoState(rs.getInt("o_state"));
				orderList.add(orders);
			}
			
			
		} catch (SQLException e) {
			System.out.println("[에러] selectOrderNo() 메소드에서 오류 발생 ");
		} finally {
			close(con, pstmt, rs);
		}
		
		return orderList;
		
	}
	
	public OrdersDTO selectOrderNoRow(int oNo) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		OrdersDTO orders=null;
		try {
			con=getConnection();
			
			String sql="select * from orders where o_no=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, oNo);
			
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				orders = new OrdersDTO();
				orders.setoNo(rs.getInt("o_no"));
				orders.setId(rs.getString("id"));
				orders.setpNo(rs.getInt("p_no"));
				orders.setcLettering(rs.getString("c_lettering"));
				orders.setoZipcode(rs.getString("o_zipcode"));
				orders.setoAddress1(rs.getString("o_address1"));
				orders.setoAddress2(rs.getString("o_address2"));
				orders.setoDate(rs.getString("o_date").substring(0,10));
				orders.setoState(rs.getInt("o_state"));
			}		
		} catch (SQLException e) {
			System.out.println("[에러]selectOrderNoRow() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return orders;
	}

	public List<OrdersDTO> selectTodayOrders(String id) {		///오늘 주문내역 불러오기
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		List<OrdersDTO> orderList = new ArrayList<OrdersDTO>();
		try {

			con=getConnection();
			String sql="select * from orders where id=? and to_char(o_date) =?";
			pstmt=con.prepareStatement(sql);
			
			String date = new SimpleDateFormat("yy/MM/dd").format(new Date());
			//System.out.println("date : "+date);

			pstmt.setString(1, id);
			pstmt.setString(2, date);
			
			rs=pstmt.executeQuery();
			
			while(rs.next()) {
				OrdersDTO order = new OrdersDTO();
				order.setoNo(rs.getInt("o_no"));
				order.setId(rs.getString("id"));
				order.setpNo(rs.getInt("p_no"));
				order.setcLettering(rs.getString("c_lettering"));
				order.setoZipcode(rs.getString("o_zipcode"));
				order.setoAddress1(rs.getString("o_address1"));
				order.setoAddress2(rs.getString("o_address2"));
				order.setoDate(rs.getString("o_date"));
				order.setoState(rs.getInt("o_state"));
				orderList.add(order);
			}
					
		} catch (SQLException e) {
			System.out.println("[에러]selectTodayOrders() 메소드의 SQL 오류 = "+e.getMessage());
			e.printStackTrace();
		} finally {
			close(con, pstmt, rs);
		}
		return orderList;
	}
	
	public int insertOrder(OrdersDTO orders) {				///주문내역 생성
		Connection con = null;
		PreparedStatement pstmt = null;
		int rows=0;
		
		try {
			con = getConnection();
			String sql ="insert into orders values(order_seq.nextval,?,?,?,?,?,?,?,1)";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, orders.getId());
			pstmt.setInt(2, orders.getpNo());
			pstmt.setString(3, orders.getcLettering());
			pstmt.setString(4, orders.getoZipcode());
			pstmt.setString(5, orders.getoAddress1());
			pstmt.setString(6, orders.getoAddress2());
			pstmt.setString(7, new SimpleDateFormat("yyyy/MM/dd").format(new Date()));
			rows = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			System.out.println("[에러] insertOrder() 메소드에서 오류 발생 ");
		} finally {
			close(con, pstmt);
		}
		
		return rows;
	}
	
	public int insertOrders(List<OrdersDTO> orderList) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int rows=0;
		
		try {
			con = getConnection();
			
			for(OrdersDTO orders : orderList) {
				String sql ="insert into orders values(order_seq.nextval,?,?,?,?,?,?,sysdate,1)";
				OrdersDTO order = new OrdersDTO();
				
				order.setId(orders.getId());
				order.setpNo(orders.getpNo());
				order.setcLettering(orders.getcLettering());
				order.setoZipcode(orders.getoZipcode());
				order.setoAddress1(orders.getoAddress1());
				order.setoAddress2(orders.getoAddress2());
				
				pstmt = con.prepareStatement(sql);
				pstmt.setString(1, order.getId());
				pstmt.setInt(2, order.getpNo());
				pstmt.setString(3, order.getcLettering());
				pstmt.setString(4, order.getoZipcode());
				pstmt.setString(5, order.getoAddress1());
				pstmt.setString(6, order.getoAddress2());
				rows = pstmt.executeUpdate();
			}
			
		} catch (SQLException e) {
			System.out.println("[에러] insertOrder() 메소드에서 오류 발생 : "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		
		return rows;
	}
	
	public int updateOrder(OrdersDTO orders) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int rows=0;
		
		try {
			con = getConnection();
			String sql ="update orders set o_lettering=?, o_zipcode=?, o_address1=?, o_address2=?, o_state=?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, orders.getcLettering());
			pstmt.setString(2, orders.getoZipcode());
			pstmt.setString(3, orders.getoAddress1());
			pstmt.setString(4, orders.getoAddress2());
			if(orders.getoState()<0 && orders.getoState()<5) {
				pstmt.setInt(7, orders.getoState());
			}
			rows = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			System.out.println("[에러] updateOrder() 메소드에서 오류 발생 ");
		} finally {
			close(con, pstmt);
		}
		
		return rows;
	}
	
	
	
	public int deleteOrder(String id) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int rows=0;
		
		try {
			con = getConnection();
			String sql ="delete orders where id=?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, id);
			rows = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			System.out.println("[에러] deleteOrder() 메소드에서 오류 발생 ");
		} finally {
			close(con, pstmt);
		}
		
		return rows;
	}
	
	public List<OrdersDTO> selectOrderList(String searchUser, String searchProduct) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		List<OrdersDTO> orderList=new ArrayList<OrdersDTO>();
		try {
			con=getConnection();
			
			if(!searchUser.equals("")){//아이디 값이 null이 아닐 경우 - 아이디 검색
				String sql="select * from orders where id=? and o_state!=0 order by o_date desc";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, searchUser);
			} else if(!searchProduct.equals("")){//제품번호 값이 null이 아닐 경우 - 제품번호 검색
				String sql="select * from orders where p_no=? and o_state!=0 order by o_date desc";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, searchProduct);
			} else { //아이디, 제품번호가 null일 경우 - 전체 반환
				String sql="select * from orders order by and o_state!=0 o_date desc";
				pstmt=con.prepareStatement(sql);
			}
			
			rs=pstmt.executeQuery();
			
			while(rs.next()) {
				OrdersDTO orders = new OrdersDTO();
				orders.setoNo(rs.getInt("o_no"));
				orders.setId(rs.getString("id"));
				orders.setpNo(rs.getInt("p_no"));
				orders.setcLettering(rs.getString("o_lettering"));
				orders.setoZipcode(rs.getString("o_zipcode"));
				orders.setoAddress1(rs.getString("o_address1"));
				orders.setoAddress2(rs.getString("o_address2"));
				orders.setoDate(rs.getString("o_date").substring(0,10));
				orders.setoState(rs.getInt("o_state"));
				
				orderList.add(orders);
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectUserList() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return orderList;
	}
}
